services:
  # Backend .NET Core API services
  react_lawyer.server:
    build:
      context: .
      dockerfile: React_Lawyer/React_Lawyer.Server/Dockerfile
    container_name: react-lawyer-api
    ports:
      - "7068:8081"  # HTTPS port
      - "5267:8080"  # HTTP port
    volumes:
      - ./React_Lawyer/React_Lawyer.Server:/app/server
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      # Enable debugging
      - DOTNET_EnableDiagnostics=1
    depends_on:
      - db
    networks:
      react-lawyer-network:
        aliases:
          - react_lawyer.server

  react_mangati.server:
    build:
      context: .
      dockerfile: React_Mangati/React_Mangati.Server/Dockerfile
    container_name: react-managti-api
    ports:
      - "7063:8081"  # HTTPS port
      - "5229:8080"  # HTTP port
    volumes:
      - ./React_Mangati/React_Mangati.Server:/app/mangati/server/
      - mangati_uploads:/app/mangati/server/uploads
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      # Enable debugging
      - DOTNET_EnableDiagnostics=1
    depends_on:
      - db
    networks:
      react-lawyer-network:
        aliases:
          - react_mangati.server

  react_rentify.server:
    build:
      context: .
      dockerfile: React_Rentify/React_Rentify.Server/Dockerfile
    container_name: react-rentify-api
    ports:
      - "7069:8081"  # HTTPS port
      - "5249:8080"  # HTTP port
    volumes:
      - ./React_Rentify/React_Rentify.Server:/app/rentify/server/
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      # Enable debugging
      - DOTNET_EnableDiagnostics=1
    depends_on:
      - db
    networks:
      react-lawyer-network:
        aliases:
          - react_rentify.server


  # NEW: Identity Verification Service
  react_identity.server:
    build:
      context: .
      dockerfile: React_Identity/React_Identity.Server/Dockerfile
    container_name: react-identity-api
    ports:
      - "7188:8081"  # HTTPS port
      - "5080:8080"  # HTTP port
    volumes:
      - ./React_Identity/React_Identity.Server:/app/identity/server/
      - identity_uploads:/app/identity/server/uploads
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - DOTNET_RUNNING_IN_CONTAINER=true
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_EnableDiagnostics=1
      # Identity-specific settings
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=identity_verification_db;Username=postgres;Password=postgres
      - JwtSettings__SecretKey=Identity_Secret_Key_For_JWT_Tokens_2024_WAN_SOLUTIONS_SUPER_SECURE
      - JwtSettings__Issuer=https://howiya.ma
      - JwtSettings__Audience=identity-api-clients
      - Storage__Provider=Local
      - Storage__LocalPath=/app/identity/server/uploads
      - AI__OpenAI__ApiKey=${OPENAI_API_KEY:-}
      - AI__Gemini__ApiKey=${GEMINI_API_KEY:-}
      - Callbacks__RetryAttempts=3
      - Callbacks__RetryDelaySeconds=5
    depends_on:
      - db
      - rabbitmq
    networks:
      react-lawyer-network:
        aliases:
          - react_identity.server


  # Frontend React client service
  react_lawyer.client:
    build:
      context: ./React_Lawyer/react_lawyer.client
      dockerfile: Dockerfile
    container_name: react-lawyer-client
    ports:
      - "54440:54440"
    volumes:
      - ./React_Lawyer/react_lawyer.client:/app
      - /app/node_modules
    environment:
      - DEV_SERVER_PORT=54440
      - ASPNETCORE_HTTPS_PORT=8081
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - DOCKER_CONTAINER=true
    depends_on:
      - react_lawyer.server
    networks:
      react-lawyer-network:
        aliases:
          - react_lawyer.client

  react_mangati.client:
    build:
      context: ./React_Mangati/react_mangati.client
      dockerfile: Dockerfile
    container_name: react-mangati-client
    ports:
      - "54450:54450"
    volumes:
      - ./React_Mangati/react_mangati.client:/app/mangati
      - /app/mangati/node_modules
    environment:
      - DEV_SERVER_PORT=54450
      - ASPNETCORE_HTTPS_PORT=8081
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - DOCKER_CONTAINER=true
    depends_on:
      - react_mangati.server
    networks:
      react-lawyer-network:
        aliases:
          - react_mangati.client

  react_rentify.client:
    build:
      context: ./React_Rentify/react_rentify.client
      dockerfile: Dockerfile
    container_name: react-rentify-client
    ports:
      - "54350:54350"
    volumes:
      - ./React_Rentify/react_rentify.client:/app/rentify
      - /app/rentify/node_modules
    environment:
      - DEV_SERVER_PORT=54350
      - ASPNETCORE_HTTPS_PORT=8081
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - DOCKER_CONTAINER=true
    depends_on:
      - react_rentify.server
    networks:
      react-lawyer-network:
        aliases:
          - react_rentify.client


  react_identity.client:
    build:
      context: ./React_Identity/react_identity.client
      dockerfile: Dockerfile
    container_name: react-identity-client
    ports:
      - "51240:51240"
    volumes:
      - ./React_Identity/react_identity.client:/app/identity
      - /app/identity/node_modules
    environment:
      - DEV_SERVER_PORT=51240
      - ASPNETCORE_HTTPS_PORT=8081
      - ASPNETCORE_URLS=https://+:8081;http://+:8080
      - DOCKER_CONTAINER=true
      - VITE_API_URL=http://localhost:5080
    depends_on:
      - react_identity.server
    networks:
      react-lawyer-network:
        aliases:
          - react_identity.client

  document_generator:
    build:
      context: .
      dockerfile: React_Lawyer/React_Lawyer.DocumentGenerator/Dockerfile
    container_name: react-lawyer-document-generator
    ports:
      - "5268:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Gemini__ApiKey=AIzaSyDfh3IQfQtg3FuRMvX1o3npm7yJzf9ABv4
      - MainApi__Url=http://react_lawyer.server:8080
    networks:
      react-lawyer-network:
        aliases:
          - generator

  rentify-gps-listener:
    build:
      context: .
      dockerfile: Rentify_GPS_Service_Worker/Dockerfile
    container_name: rentify-gps-listener
    ports:
      - "5000:5000/udp" 
      - "5000:5000/tcp"
    environment:
      # Point EF Core at the 'rentify_gps_db_1' database within the same 'db' container
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=rentify_gps_db_1;Username=postgres;Password=postgres
      - GpsListener__Port=5000
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - db
    networks:
      react-lawyer-network:
        aliases:
          - rentify_gps_listener


  # Message Queue for Identity Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: wan-rabbitmq
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      react-lawyer-network:
        aliases:
          - rabbitmq

  # Database service (PostgreSQL as an example)
  db:
    image: postgres:15
    container_name: react-lawyer-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: reactlawyerdb
      POSTGRES_MULTIPLE_DATABASES: lawyerdocumentgeneratordb,mangati_db_1,rentify_db_1,rentify_gps_db_1,identity_verification_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      react-lawyer-network:
        aliases:
          - db

  # Nginx reverse proxy (optional but helpful)
  nginx:
    image: nginx:latest
    container_name: react-lawyer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/www:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    depends_on:
      - react_lawyer.server
      - react_lawyer.client
    networks:
      react-lawyer-network:
        aliases:
          - nginx


  certbot:
    image: certbot/certbot
    container_name: react-lawyer-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./nginx/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done'"
    networks:
      - react-lawyer-network

networks:
  react-lawyer-network:
    driver: bridge

volumes:
  postgres_data:
  mangati_uploads:
  identity_uploads:
  rabbitmq_data:
