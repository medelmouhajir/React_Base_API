// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using React_Mangati.Server.Data;

#nullable disable

namespace React_Mangati.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250613193647_tokens_Migration")]
    partial class tokens_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Favorites.UserFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFavorites");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Languages.Serie_Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SerieId");

                    b.ToTable("Serie_Languages");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Chapters.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Chapters.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Is_For_Studio")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Characters_GroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Characters_GroupId");

                    b.HasIndex("SerieId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Character_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Image_Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Is_Main")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Character_Images");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Groups.Characters_Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Characters_Groups");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Generations.Image_Generation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date_Completed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Result_Path")
                        .HasColumnType("text");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("Tokens")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Image_Generations");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Generations.Image_Generation_Reference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Extra_Id_1")
                        .HasColumnType("integer");

                    b.Property<Guid>("Extra_Id_2")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Image_GenerationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Image_GenerationId");

                    b.ToTable("Image_Generation_References");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Goups.Places_Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Places_Groups");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Place_Scene", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Places_GroupId")
                        .HasColumnType("uuid");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Places_GroupId");

                    b.HasIndex("SerieId");

                    b.ToTable("Place_Scenes");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Place_Scene_Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Place_SceneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Place_SceneId");

                    b.ToTable("Place_Scene_Images");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Uploads.Serie_Upload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date_Uploaded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Serie_Uploads");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Tags.Serie_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("TagId");

                    b.ToTable("Serie_Tags");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Tags.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("User");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Role");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Viewer.Reading_Progress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LastReadPage")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("UserId");

                    b.ToTable("Reading_Progresses");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Viewer.Reading_Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("FitToWidth")
                        .HasColumnType("boolean");

                    b.Property<int>("Reading_Mode")
                        .HasColumnType("integer");

                    b.Property<int>("SerieId")
                        .HasColumnType("integer");

                    b.Property<int>("Theme")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reading_Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Favorites.UserFavorite", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Users.User", "User")
                        .WithMany("UserFavorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Languages.Serie_Language", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Languages.Language", "Language")
                        .WithMany("MangaLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Serie_Languages")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Chapters.Chapter", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Chapters")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Chapters.Page", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Chapters.Chapter", "Chapter")
                        .WithMany("Pages")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Serie", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Users.User", "Author")
                        .WithMany("Series")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Character", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Studio.Characters.Groups.Characters_Group", "Characters_Group")
                        .WithMany("Characters")
                        .HasForeignKey("Characters_GroupId");

                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Characters")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characters_Group");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Character_Image", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Studio.Characters.Character", "Character")
                        .WithMany("Character_Images")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Groups.Characters_Group", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Characters_Groups")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Generations.Image_Generation", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Image_Generations")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Generations.Image_Generation_Reference", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Studio.Generations.Image_Generation", "Image_Generation")
                        .WithMany("Image_Generation_References")
                        .HasForeignKey("Image_GenerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image_Generation");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Goups.Places_Group", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Places_Groups")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Place_Scene", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Studio.Places.Goups.Places_Group", "Places_Group")
                        .WithMany("Place_Scenes")
                        .HasForeignKey("Places_GroupId");

                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Place_Scenes")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Places_Group");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Place_Scene_Image", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Studio.Places.Place_Scene", "Place_Scene")
                        .WithMany("Place_Scene_Images")
                        .HasForeignKey("Place_SceneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place_Scene");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Uploads.Serie_Upload", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Serie_Uploads")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Tags.Serie_Tag", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany("Serie_Tags")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Tags.Tag", "Tag")
                        .WithMany("MangaTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Viewer.Reading_Progress", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Chapters.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("User");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Viewer.Reading_Settings", b =>
                {
                    b.HasOne("React_Mangati.Server.Models.Series.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Mangati.Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Languages.Language", b =>
                {
                    b.Navigation("MangaLanguages");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Chapters.Chapter", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Series.Serie", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Characters");

                    b.Navigation("Characters_Groups");

                    b.Navigation("Image_Generations");

                    b.Navigation("Place_Scenes");

                    b.Navigation("Places_Groups");

                    b.Navigation("Serie_Languages");

                    b.Navigation("Serie_Tags");

                    b.Navigation("Serie_Uploads");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Character", b =>
                {
                    b.Navigation("Character_Images");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Characters.Groups.Characters_Group", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Generations.Image_Generation", b =>
                {
                    b.Navigation("Image_Generation_References");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Goups.Places_Group", b =>
                {
                    b.Navigation("Place_Scenes");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Studio.Places.Place_Scene", b =>
                {
                    b.Navigation("Place_Scene_Images");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Tags.Tag", b =>
                {
                    b.Navigation("MangaTags");
                });

            modelBuilder.Entity("React_Mangati.Server.Models.Users.User", b =>
                {
                    b.Navigation("Series");

                    b.Navigation("UserFavorites");
                });
#pragma warning restore 612, 618
        }
    }
}
