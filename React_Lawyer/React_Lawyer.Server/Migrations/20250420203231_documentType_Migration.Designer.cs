// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using React_Lawyer.Server.Data;

#nullable disable

namespace React_Lawyer.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250420203231_documentType_Migration")]
    partial class documentType_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LawyerSecretary", b =>
                {
                    b.Property<int>("AssignedLawyersLawyerId")
                        .HasColumnType("integer");

                    b.Property<int>("SecretaryId")
                        .HasColumnType("integer");

                    b.HasKey("AssignedLawyersLawyerId", "SecretaryId");

                    b.HasIndex("SecretaryId");

                    b.ToTable("LawyerSecretary");
                });

            modelBuilder.Entity("Shared_Models.Appointments.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentId"));

                    b.Property<decimal?>("BillableAmount")
                        .HasColumnType("numeric");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("boolean");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<int?>("LawyerId")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ScheduledById")
                        .HasColumnType("integer");

                    b.Property<int?>("SecretaryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("LawyerId");

                    b.HasIndex("ScheduledById");

                    b.HasIndex("SecretaryId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Shared_Models.Cases.Case", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CaseId"));

                    b.Property<decimal?>("ActualSettlement")
                        .HasColumnType("numeric");

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CourtCaseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("ExpectedSettlement")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<int?>("LawyerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextHearingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OpposingCounsel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OpposingParty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentCaseId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("CaseId");

                    b.HasIndex("CaseNumber");

                    b.HasIndex("ClientId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("LawyerId");

                    b.HasIndex("ParentCaseId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Shared_Models.Cases.CaseEvent", b =>
                {
                    b.Property<int>("CaseEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CaseEventId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Outcome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("CaseEventId");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentId");

                    b.ToTable("CaseEvents");
                });

            modelBuilder.Entity("Shared_Models.Cases.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSharedWithClient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousVersionId")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UploadedById")
                        .HasColumnType("integer");

                    b.Property<int?>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("DocumentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("PreviousVersionId");

                    b.HasIndex("UploadDate");

                    b.HasIndex("UploadedById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Shared_Models.Clients.Case_Client", b =>
                {
                    b.Property<int>("Case_ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Case_ClientId"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.HasKey("Case_ClientId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientId");

                    b.ToTable("Case_Client");
                });

            modelBuilder.Entity("Shared_Models.Clients.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ClientId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("LastName", "FirstName");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Shared_Models.Firms.LawFirm", b =>
                {
                    b.Property<int>("LawFirmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LawFirmId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("integer");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BillingContact")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("FoundedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("SubscriptionExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubscriptionPlan")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TaxId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("LawFirmId");

                    b.HasIndex("AdminId");

                    b.ToTable("LawFirms");
                });

            modelBuilder.Entity("Shared_Models.Invoices.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceNumber");

                    b.HasIndex("LawFirmId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Shared_Models.Invoices.InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InvoiceItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TimeEntryId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TimeEntryId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Shared_Models.Invoices.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ReceivedById")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("ReceivedById");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Shared_Models.Notifications.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("ActionUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Shared_Models.TimeEntries.TimeEntry", b =>
                {
                    b.Property<int>("TimeEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TimeEntryId"));

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CaseId")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBillable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBilled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<int>("LawyerId")
                        .HasColumnType("integer");

                    b.HasKey("TimeEntryId");

                    b.HasIndex("ActivityDate");

                    b.HasIndex("CaseId");

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("LawyerId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("Shared_Models.Users.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<bool>("CanManageBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageSettings")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageUsers")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanViewReports")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Shared_Models.Users.Lawyer", b =>
                {
                    b.Property<int>("LawyerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LawyerId"));

                    b.Property<string>("BarNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<string>("Specializations")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LawyerId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Lawyers");
                });

            modelBuilder.Entity("Shared_Models.Users.Secretary", b =>
                {
                    b.Property<int>("SecretaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SecretaryId"));

                    b.Property<bool>("CanManageBilling")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanManageClients")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanScheduleAppointments")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUploadDocuments")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LawFirmId")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("SecretaryId");

                    b.HasIndex("LawFirmId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Secretaries");
                });

            modelBuilder.Entity("Shared_Models.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LawyerSecretary", b =>
                {
                    b.HasOne("Shared_Models.Users.Lawyer", null)
                        .WithMany()
                        .HasForeignKey("AssignedLawyersLawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.Secretary", null)
                        .WithMany()
                        .HasForeignKey("SecretaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared_Models.Appointments.Appointment", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId");

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.Lawyer", "Lawyer")
                        .WithMany("Appointments")
                        .HasForeignKey("LawyerId");

                    b.HasOne("Shared_Models.Users.User", "ScheduledBy")
                        .WithMany()
                        .HasForeignKey("ScheduledById");

                    b.HasOne("Shared_Models.Users.Secretary", null)
                        .WithMany("ScheduledAppointments")
                        .HasForeignKey("SecretaryId");

                    b.Navigation("Case");

                    b.Navigation("Client");

                    b.Navigation("LawFirm");

                    b.Navigation("Lawyer");

                    b.Navigation("ScheduledBy");
                });

            modelBuilder.Entity("Shared_Models.Cases.Case", b =>
                {
                    b.HasOne("Shared_Models.Clients.Client", null)
                        .WithMany("Cases")
                        .HasForeignKey("ClientId");

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany("Cases")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.Lawyer", "AssignedLawyer")
                        .WithMany("Cases")
                        .HasForeignKey("LawyerId");

                    b.HasOne("Shared_Models.Cases.Case", "ParentCase")
                        .WithMany("RelatedCases")
                        .HasForeignKey("ParentCaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignedLawyer");

                    b.Navigation("LawFirm");

                    b.Navigation("ParentCase");
                });

            modelBuilder.Entity("Shared_Models.Cases.CaseEvent", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany("Events")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Cases.Document", "RelatedDocument")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.Navigation("Case");

                    b.Navigation("CreatedBy");

                    b.Navigation("RelatedDocument");
                });

            modelBuilder.Entity("Shared_Models.Cases.Document", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany("Documents")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Cases.Document", "PreviousVersion")
                        .WithMany()
                        .HasForeignKey("PreviousVersionId");

                    b.HasOne("Shared_Models.Users.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");

                    b.Navigation("Case");

                    b.Navigation("LawFirm");

                    b.Navigation("PreviousVersion");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("Shared_Models.Clients.Case_Client", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany("Case_Clients")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany("Case_Clients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Shared_Models.Clients.Client", b =>
                {
                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany("Clients")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawFirm");
                });

            modelBuilder.Entity("Shared_Models.Firms.LawFirm", b =>
                {
                    b.HasOne("Shared_Models.Users.Admin", null)
                        .WithMany("ManagedFirms")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("Shared_Models.Invoices.Invoice", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany("Invoices")
                        .HasForeignKey("CaseId");

                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Client");

                    b.Navigation("LawFirm");
                });

            modelBuilder.Entity("Shared_Models.Invoices.InvoiceItem", b =>
                {
                    b.HasOne("Shared_Models.Invoices.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.TimeEntries.TimeEntry", "TimeEntry")
                        .WithMany()
                        .HasForeignKey("TimeEntryId");

                    b.Navigation("Invoice");

                    b.Navigation("TimeEntry");
                });

            modelBuilder.Entity("Shared_Models.Invoices.Payment", b =>
                {
                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Invoices.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.User", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById");

                    b.Navigation("Client");

                    b.Navigation("Invoice");

                    b.Navigation("LawFirm");

                    b.Navigation("ReceivedBy");
                });

            modelBuilder.Entity("Shared_Models.Notifications.Notification", b =>
                {
                    b.HasOne("Shared_Models.Appointments.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Shared_Models.Cases.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("Shared_Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Case");

                    b.Navigation("Client");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared_Models.TimeEntries.TimeEntry", b =>
                {
                    b.HasOne("Shared_Models.Cases.Case", "Case")
                        .WithMany("TimeEntries")
                        .HasForeignKey("CaseId");

                    b.HasOne("Shared_Models.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Shared_Models.Invoices.Invoice", "Invoice")
                        .WithMany("TimeEntries")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany()
                        .HasForeignKey("LawFirmId");

                    b.HasOne("Shared_Models.Users.Lawyer", "Lawyer")
                        .WithMany("TimeEntries")
                        .HasForeignKey("LawyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("Client");

                    b.Navigation("Invoice");

                    b.Navigation("LawFirm");

                    b.Navigation("Lawyer");
                });

            modelBuilder.Entity("Shared_Models.Users.Admin", b =>
                {
                    b.HasOne("Shared_Models.Users.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Shared_Models.Users.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared_Models.Users.Lawyer", b =>
                {
                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany("Lawyers")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.User", "User")
                        .WithOne("Lawyer")
                        .HasForeignKey("Shared_Models.Users.Lawyer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawFirm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared_Models.Users.Secretary", b =>
                {
                    b.HasOne("Shared_Models.Firms.LawFirm", "LawFirm")
                        .WithMany("Secretaries")
                        .HasForeignKey("LawFirmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared_Models.Users.User", "User")
                        .WithOne("Secretary")
                        .HasForeignKey("Shared_Models.Users.Secretary", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawFirm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared_Models.Cases.Case", b =>
                {
                    b.Navigation("Case_Clients");

                    b.Navigation("Documents");

                    b.Navigation("Events");

                    b.Navigation("Invoices");

                    b.Navigation("RelatedCases");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("Shared_Models.Clients.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Case_Clients");

                    b.Navigation("Cases");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Shared_Models.Firms.LawFirm", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("Clients");

                    b.Navigation("Lawyers");

                    b.Navigation("Secretaries");
                });

            modelBuilder.Entity("Shared_Models.Invoices.Invoice", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("Shared_Models.Users.Admin", b =>
                {
                    b.Navigation("ManagedFirms");
                });

            modelBuilder.Entity("Shared_Models.Users.Lawyer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Cases");

                    b.Navigation("TimeEntries");
                });

            modelBuilder.Entity("Shared_Models.Users.Secretary", b =>
                {
                    b.Navigation("ScheduledAppointments");
                });

            modelBuilder.Entity("Shared_Models.Users.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Lawyer")
                        .IsRequired();

                    b.Navigation("Secretary")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
