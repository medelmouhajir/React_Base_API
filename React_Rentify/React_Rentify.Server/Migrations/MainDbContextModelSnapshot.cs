// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using React_Rentify.Server.Data;

#nullable disable

namespace React_Rentify.Server.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Agencies.Agency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Conditions")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoUrlAssociation")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneOne")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneTwo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Agencies.Agency_Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Expense_CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Expense_CategoryId");

                    b.ToTable("Agency_Attachments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Alerts.Service_Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AlertType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DueMileage")
                        .HasColumnType("integer");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResolvedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("ServiceAlerts");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Blacklists.Blacklist_Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .HasColumnType("text");

                    b.Property<string>("PassportId")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReportedByAgencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReportedByAgencyId");

                    b.ToTable("Blacklist");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Cars.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Car_ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Car_YearId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CurrentKM")
                        .HasColumnType("integer");

                    b.Property<decimal>("DailyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("DeviceSerialNumber")
                        .HasColumnType("text");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTrackingActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastKmUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Car_ModelId");

                    b.HasIndex("Car_YearId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Cars.Car_Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Car_Attachments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("boolean");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .HasColumnType("text");

                    b.Property<string>("PassportId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Customers.Customer_Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Customer_Attachments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Created_ById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("Expense_CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("Created_ById");

                    b.HasIndex("Expense_CategoryId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense_Attachement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url_Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Expense_Attachements");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense_Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Expense_Categories");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Car_Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Car_Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("YearValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CarYears");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Manufacturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Invoices.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Invoices.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Maintenances.Maintenance_Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("MaintenanceRecords");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Reservations.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("AgreedPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("DropoffLocation")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<float?>("FuelLevelEnd")
                        .HasColumnType("real");

                    b.Property<float?>("FuelLevelStart")
                        .HasColumnType("real");

                    b.Property<decimal?>("OdometerEnd")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("OdometerStart")
                        .HasColumnType("numeric");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("CarId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Reservations.Reservation_Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date_Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ReservationId");

                    b.ToTable("Reservation_Customers");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.AgencySubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgencyId1")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsTrialPeriod")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastBillingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextBillingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("TrialEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId1")
                        .IsUnique();

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("AgencyId", "Status");

                    b.ToTable("AgencySubscriptions");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionInvoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencySubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("BillingPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BillingPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentTransactionId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AgencySubscriptionId");

                    b.ToTable("SubscriptionInvoices");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BillingCycle")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("HasAPIAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasAdvancedReporting")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasExpenseTracking")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasGPSTracking")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasMaintenanceModule")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxCars")
                        .HasColumnType("integer");

                    b.Property<int>("MaxCustomers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxReservations")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AgencySubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<int>("CarsCount")
                        .HasColumnType("integer");

                    b.Property<int>("CustomersCount")
                        .HasColumnType("integer");

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReservationsCount")
                        .HasColumnType("integer");

                    b.Property<int>("UsersCount")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AgencySubscriptionId", "Year", "Month")
                        .IsUnique();

                    b.ToTable("SubscriptionUsages");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("AgencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Agencies.Agency_Attachment", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Agency_Attachments")
                        .HasForeignKey("AgencyId");

                    b.HasOne("React_Rentify.Server.Models.Expenses.Expense_Category", null)
                        .WithMany("Agency_Attachments")
                        .HasForeignKey("Expense_CategoryId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Alerts.Service_Alert", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Cars.Car", "Car")
                        .WithMany("ServiceAlerts")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Blacklists.Blacklist_Entry", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "ReportedByAgency")
                        .WithMany()
                        .HasForeignKey("ReportedByAgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReportedByAgency");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Cars.Car", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Cars")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Filters.Cars.Car_Model", "Car_Model")
                        .WithMany("Cars")
                        .HasForeignKey("Car_ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Filters.Cars.Car_Year", "Car_Year")
                        .WithMany("Cars")
                        .HasForeignKey("Car_YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Car_Model");

                    b.Navigation("Car_Year");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Cars.Car_Attachment", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Cars.Car", "Car")
                        .WithMany("Car_Attachments")
                        .HasForeignKey("CarId");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Customers.Customer", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Customers")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Customers.Customer_Attachment", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Customers.Customer", "Customer")
                        .WithMany("Customer_Attachments")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Users.User", "Created_By")
                        .WithMany()
                        .HasForeignKey("Created_ById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Expenses.Expense_Category", "Expense_Category")
                        .WithMany()
                        .HasForeignKey("Expense_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Created_By");

                    b.Navigation("Expense_Category");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense_Attachement", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Expenses.Expense", "Expense")
                        .WithMany("Expense_Attachements")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense_Category", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Expense_Categories")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Car_Model", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Filters.Cars.Manufacturer", "Manufacturer")
                        .WithMany("Car_Models")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Invoices.Invoice", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Reservations.Reservation", "Reservation")
                        .WithOne("Invoice")
                        .HasForeignKey("React_Rentify.Server.Models.Invoices.Invoice", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Invoices.Payment", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Invoices.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Maintenances.Maintenance_Record", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Cars.Car", "Car")
                        .WithMany("MaintenanceRecords")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Reservations.Reservation", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Reservations")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Cars.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Users.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("React_Rentify.Server.Models.Customers.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Agency");

                    b.Navigation("Car");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Reservations.Reservation_Customer", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Customers.Customer", "Customer")
                        .WithMany("Reservation_Customers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Reservations.Reservation", "Reservation")
                        .WithMany("Reservation_Customers")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.AgencySubscription", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("SubscriptionHistory")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", null)
                        .WithOne("CurrentSubscription")
                        .HasForeignKey("React_Rentify.Server.Models.Subscriptions.AgencySubscription", "AgencyId1");

                    b.HasOne("React_Rentify.Server.Models.Subscriptions.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("AgencySubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionInvoice", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Subscriptions.AgencySubscription", "AgencySubscription")
                        .WithMany("SubscriptionInvoices")
                        .HasForeignKey("AgencySubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencySubscription");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionUsage", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Subscriptions.AgencySubscription", "AgencySubscription")
                        .WithMany()
                        .HasForeignKey("AgencySubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencySubscription");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Users.User", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.Agencies.Agency", "Agency")
                        .WithMany("Users")
                        .HasForeignKey("AgencyId");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Agencies.Agency", b =>
                {
                    b.Navigation("Agency_Attachments");

                    b.Navigation("Cars");

                    b.Navigation("CurrentSubscription");

                    b.Navigation("Customers");

                    b.Navigation("Expense_Categories");

                    b.Navigation("Reservations");

                    b.Navigation("SubscriptionHistory");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Cars.Car", b =>
                {
                    b.Navigation("Car_Attachments");

                    b.Navigation("MaintenanceRecords");

                    b.Navigation("Reservations");

                    b.Navigation("ServiceAlerts");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Customers.Customer", b =>
                {
                    b.Navigation("Customer_Attachments");

                    b.Navigation("Reservation_Customers");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense", b =>
                {
                    b.Navigation("Expense_Attachements");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Expenses.Expense_Category", b =>
                {
                    b.Navigation("Agency_Attachments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Car_Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Car_Year", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Filters.Cars.Manufacturer", b =>
                {
                    b.Navigation("Car_Models");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Invoices.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Reservations.Reservation", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("Reservation_Customers");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.AgencySubscription", b =>
                {
                    b.Navigation("SubscriptionInvoices");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.Subscriptions.SubscriptionPlan", b =>
                {
                    b.Navigation("AgencySubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
