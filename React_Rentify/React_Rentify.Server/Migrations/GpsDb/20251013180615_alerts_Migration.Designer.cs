// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using React_Rentify.Server.Data;

#nullable disable

namespace React_Rentify.Server.Migrations.GpsDb
{
    [DbContext(typeof(GpsDbContext))]
    [Migration("20251013180615_alerts_Migration")]
    partial class alerts_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Alerts.Speeding_Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AcknowledgedBy")
                        .HasColumnType("text");

                    b.Property<double>("ActualSpeedKmh")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ExceededByKmh")
                        .HasColumnType("double precision");

                    b.Property<double>("ExceededByPercentage")
                        .HasColumnType("double precision");

                    b.Property<Guid>("Gps_DeviceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("Location_RecordId")
                        .HasColumnType("uuid");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("SpeedLimitKmh")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Gps_DeviceId");

                    b.HasIndex("Location_RecordId");

                    b.ToTable("Speeding_Alerts");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Commands.CommandQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CommandData")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CommandType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Gps_DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Gps_DeviceId");

                    b.ToTable("CommandQueues");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Gps_Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeactivatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IMEI")
                        .HasColumnType("text");

                    b.Property<string>("InstallCarPlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InstalledOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gps_Devices");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Records.Location_Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<string>("DeviceSerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Gps_DeviceId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Heading")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IgnitionOn")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("SpeedKmh")
                        .HasColumnType("double precision");

                    b.Property<string>("StatusFlags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Gps_DeviceId");

                    b.ToTable("Location_Records");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Alerts.Speeding_Alert", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.GPS.Gps_Device", "Gps_Device")
                        .WithMany()
                        .HasForeignKey("Gps_DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("React_Rentify.Server.Models.GPS.Records.Location_Record", "Location_Record")
                        .WithMany()
                        .HasForeignKey("Location_RecordId");

                    b.Navigation("Gps_Device");

                    b.Navigation("Location_Record");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Commands.CommandQueue", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.GPS.Gps_Device", "Gps_Device")
                        .WithMany("CommandQueues")
                        .HasForeignKey("Gps_DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gps_Device");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Records.Location_Record", b =>
                {
                    b.HasOne("React_Rentify.Server.Models.GPS.Gps_Device", "Gps_Device")
                        .WithMany("Location_Records")
                        .HasForeignKey("Gps_DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gps_Device");
                });

            modelBuilder.Entity("React_Rentify.Server.Models.GPS.Gps_Device", b =>
                {
                    b.Navigation("CommandQueues");

                    b.Navigation("Location_Records");
                });
#pragma warning restore 612, 618
        }
    }
}
